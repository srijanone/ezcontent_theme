<?php

/**
 * @file
 *
 * Place your custom PHP code in this file.
 */

use Drupal\node\NodeInterface;
use Drupal\Core\Link;
use Drupal\block_content\BlockContentInterface;

 /**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function ezcontent_theme_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof NodeInterface) {
    $suggestions[] = 'page__' . $node->bundle();
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function ezcontent_theme_preprocess_field(&$variables) {
  if (($variables['element']['#field_name'] == 'field_card' && $variables['element']['#entity_type'] == 'block_content')) {
    $variables['card_block_view_mode'] = $variables['element']['#view_mode'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ezcontent_theme_preprocess_field__node__field_thumbnail__article__card(&$variables) {
  $node = $variables['element']['#object'];
  if ($node instanceof NodeInterface && !$node->in_preview) {
    $variables['referenced_entity_url'] = $node->toUrl()->toString();
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-task.html.twig.
 */
function ezcontent_theme_preprocess_menu_local_task(&$variables) {
  $link = $variables['element']['#link'];
  $url = $link['url'];
  $options = $url->getOptions();
  $url->setOptions($options + $link['localized_options']);
  $variables['item'] = Link::fromTextAndUrl($link['title'], $url);
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-action.html.twig.
 */
function ezcontent_theme_preprocess_menu_local_action(&$variables) {
  $link = $variables['element']['#link'];
  $link += [
    'localized_options' => [],
  ];
  $link['localized_options']['attributes']['class'][] = 'btn';
  $link['localized_options']['attributes']['class'][] = 'btn-secondary';
  $link['localized_options']['set_active_class'] = TRUE;
  $variables['link'] = [
    '#type' => 'link',
    '#title' => $link['title'],
    '#options' => $link['localized_options'],
    '#url' => $link['url'],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function ezcontent_theme_theme_suggestions_block_alter(&$suggestions, $variables) {
  $content = $variables['elements']['content'];
  $content_layout = isset($variables['elements']['content']['content']) ? $variables['elements']['content']['content'] : [];
  if (isset($content['#block_content']) && $content['#block_content'] instanceof BlockContentInterface) {
    $suggestions[] = 'block__' . $content['#block_content']->bundle();
  }elseif(isset($content_layout['#block_content']) && $content_layout['#block_content'] instanceof BlockContentInterface){
    $suggestions[] = 'block__' . $content_layout['#block_content']->bundle();
  }
}

/**
 * Implements hook_preprocess_HOOK() for paragraph--gallery.html.twig.
 */

function ezcontent_theme_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];
  if($paragraph->bundle() == 'masonry') {
	  $item_selector = '.item_get';
  	$container = '.field--name-field-media-items';
    $options = ['layoutColumnWidth' => '50', 'isLayoutResizable' => 1, 'layoutColumnWidthUnit' => '%', 'isLayoutFitsWidth' => 1];

   \Drupal::service('masonry.service')
    ->applyMasonryDisplay($variables, $container, $item_selector, $options);  
  }
}
 
